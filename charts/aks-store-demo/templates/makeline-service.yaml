apiVersion: v1
kind: ConfigMap
metadata:
  name: makeline-service-configs
data:
  {{- if eq .Values.useAzureAd false }}
  ORDER_QUEUE_URI: "{{ .Values.makelineService.orderQueueUri }}"
  ORDER_QUEUE_USERNAME: "{{ .Values.makelineService.orderQueueUsername }}"
  ORDER_QUEUE_PASSWORD: "{{ .Values.makelineService.orderQueuePassword }}"
  {{- else }}
  USE_WORKLOAD_IDENTITY_AUTH: "true"
  ORDER_QUEUE_HOSTNAME: "{{ .Values.makelineService.orderQueueHost }}"
  {{- end }}
  ORDER_QUEUE_NAME: "{{ .Values.makelineService.orderQueueName }}"
  ORDER_DB_URI: "{{ .Values.makelineService.orderDBUri }}"
  ORDER_DB_NAME: "{{ .Values.makelineService.orderDBName }}"
  {{- if or (eq .Values.makelineService.orderDBApi "cosmosdbsql") (eq .Values.useAzureAd true) }}
  ORDER_DB_API: "{{ .Values.makelineService.orderDBApi }}"
  ORDER_DB_CONTAINER_NAME: "{{ .Values.makelineService.orderDBContainerName }}"
  ORDER_DB_PARTITION_KEY: "storeId"
  ORDER_DB_PARTITION_VALUE: "pets"
  {{- else }}
  ORDER_DB_COLLECTION_NAME: "{{ .Values.makelineService.orderDBCollectionName }}"
  {{- end }}
---
{{- if and (eq .Values.useAzureAd false) .Values.makelineService.orderDBUsername .Values.makelineService.orderDBPassword }}
apiVersion: v1
kind: Secret
metadata:
  name: makeline-service-secrets
data:
  ORDER_DB_USERNAME: "{{ .Values.makelineService.orderDBUsername | b64enc  }}"
  ORDER_DB_PASSWORD: "{{ .Values.makelineService.orderDBPassword | b64enc  }}"
---
{{- end }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: makeline-service
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: makeline-service
  template:
    metadata:
      labels:
        app: makeline-service
        {{- if eq .Values.useAzureAd true }}
        azure.workload.identity/use: "true"
        {{- end }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8088"
    spec:
      {{- if eq .Values.useAzureAd true }}
      serviceAccount: {{ .Values.managedIdentityName }}
      {{- end }}
      nodeSelector:
        "kubernetes.io/os": linux
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 8 }}
      containers:
      - name: makeline-service
        {{- if .Values.imageRegistry }}
        image: {{ .Values.imageRegistry }}/{{ .Values.makelineService.image.repository }}:{{ .Values.makelineService.image.tag }}
        {{- else }}
        image: {{ .Values.makelineService.image.repository }}:{{ .Values.makelineService.image.tag }}
        {{- end }}
        imagePullPolicy: Always
        env:
        - name: ORDER_QUEUE_NAME
          value: {{ .Values.makelineService.orderQueueName }}
        {{- if and .Values.makelineService.orderQueueHost .Values.makelineService.orderQueueUri }}
        - name: ORDER_QUEUE_HOST
          value: {{ .Values.makelineService.orderQueueHost }}
        - name: ORDER_QUEUE_URI
          value: {{ .Values.makelineService.orderQueueUri }}
        {{- end }}
        - name: ORDER_DB_API
          value: {{ .Values.makelineService.orderDBApi }}
        - name: ORDER_DB_URI
          value: {{ .Values.makelineService.orderDBUri }}
        - name: ORDER_DB_NAME
          value: {{ .Values.makelineService.orderDBName }}
        - name: ORDER_DB_COLLECTION_NAME
          value: {{ .Values.makelineService.orderDBCollectionName }}
        - name: ORDER_DB_CONTAINER_NAME
          value: {{ .Values.makelineService.orderDBContainerName }}
        {{- if and .Values.makelineService.orderDBUsername .Values.makelineService.orderDBPassword }}
        - name: ORDER_DB_USERNAME
          value: {{ .Values.makelineService.orderDBUsername }}
        - name: ORDER_DB_PASSWORD
          value: {{ .Values.makelineService.orderDBPassword }}
        {{- end }}
        {{- if eq .Values.useAzureAd true }}
        - name: USE_AZURE_AD
          value: "True"
        {{- end }}
        - name: ORDER_QUEUE_USERNAME
          value: {{ .Values.makelineService.orderQueueUsername }}
        - name: ORDER_QUEUE_PASSWORD
          value: {{ .Values.makelineService.orderQueuePassword }}
        ports:
        - containerPort: 3000
        - containerPort: 8088
        resources:
          requests:
            memory: 50Mi
            cpu: 20m
          limits:
            memory: 150Mi
            cpu: 50m
        startupProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          failureThreshold: 20
          timeoutSeconds: 3
          periodSeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 3
          failureThreshold: 10
          timeoutSeconds: 3
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 3
          failureThreshold: 10
          timeoutSeconds: 3
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: makeline-service
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 3000
    targetPort: 3000
  - name: metrics
    port: 8088
    targetPort: 8088
  selector:
    app: makeline-service